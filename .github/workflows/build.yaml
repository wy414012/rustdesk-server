name: Build OpenRustDesk-Server

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

env:
  RS_PUB_KEY: "${{ secrets.RS_PUB_KEY }}"
  RENDEZVOUS_SERVER: "${{ secrets.RENDEZVOUS_SERVER }}"
  API_SERVER: "${{ secrets.API_SERVER }}"
  TAG_NAME: "${{ inputs.upload-tag }}"
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"

permissions:
   contents: write  # 必需 

jobs:

  # binary build
  build:
    name: Build - ${{ matrix.job.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   target: "x86_64-unknown-linux-musl" }
          - { name: "arm64v8", target: "aarch64-unknown-linux-musl" }
          - { name: "armv7",   target: "armv7-unknown-linux-musleabihf" }
          - { name: "i386",    target: "i686-unknown-linux-musl" }
          - { name: "amd64fb",    target: "x86_64-unknown-freebsd" }

    steps:      
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.87.0"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: ${{ matrix.job.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target=${{ matrix.job.target }}
          use-cross: true  

      - name: Exec chmod
        run: chmod -v a+x target/${{ matrix.job.target }}/release/*

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-linux-${{ matrix.job.name }}
          path: |
            target/${{ matrix.job.target }}/release/hbbr
            target/${{ matrix.job.target }}/release/hbbs
            target/${{ matrix.job.target }}/release/rustdesk-utils
          if-no-files-found: error

  build-win:
    name: Build - windows
    runs-on: windows-latest
    steps:     
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.87.0"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: x86_64-pc-windows-msvc

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target=x86_64-pc-windows-msvc
          use-cross: true

      - name: Install NSIS
        run: |
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop update
          scoop bucket add extras
          scoop install nsis

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Sign exe files
        uses: GermanBluefox/code-sign-action@v7
        if: false
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          folder: 'target\x86_64-pc-windows-msvc\release'
          recursive: false

      - name: Build UI browser file
        run: |
          npm i
          npm run build
        working-directory: ./ui/html

      - name: Build UI setup file
        run: |
          rustup default 1.87.0
          cargo build --release
          xcopy /y ..\target\x86_64-pc-windows-msvc\release\*.exe setup\bin\
          xcopy /y target\release\*.exe setup\
          mkdir setup\logs
          makensis /V1 setup.nsi
          mkdir SignOutput
          mv RustDeskServer.Setup.exe SignOutput\
          mv ..\target\x86_64-pc-windows-msvc\release\*.exe SignOutput\
        working-directory: ./ui

      - name: Sign UI setup file 
        uses: GermanBluefox/code-sign-action@v7
        if: false
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          folder: './ui/SignOutput'
          recursive: false

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-windows-x86_64
          path: |
            ui\SignOutput\hbbr.exe
            ui\SignOutput\hbbs.exe
            ui\SignOutput\rustdesk-utils.exe
            ui\SignOutput\RustDeskServer.Setup.exe
          if-no-files-found: error

  # github (nightly) release with all binaries
  release:
    name: Github release
    needs: 
      - build
      - build-win
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: "linux", name: "amd64", suffix: "" }
          - { os: "linux", name: "arm64v8", suffix: "" }
          - { os: "linux", name: "armv7", suffix: "" }
          - { os: "linux", name: "i386", suffix: "" }
          - { os: "linux", name: "amd64fb", suffix: "" }
          - { os: "windows", name: "x86_64", suffix: "-unsigned" }
          
    steps:
      - name: Download binaries (${{ matrix.job.os }} - ${{ matrix.job.name }})
        uses: actions/download-artifact@v4
        with:
          name: binaries-${{ matrix.job.os }}-${{ matrix.job.name }}
          path: ${{ matrix.job.name }}

      - name: Exec chmod
        run: chmod -v a+x ${{ matrix.job.name }}/*

      - name: Pack files (${{ matrix.job.os }} - ${{ matrix.job.name }})
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y zip
          zip ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}${{ matrix.job.suffix }}.zip ${{ matrix.job.name }}/*

      - name: Create Release (${{ matrix.job.os }} - (${{ matrix.job.name }})
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}${{ matrix.job.suffix }}.zip

  deb-package:
    name: debian package - ${{ matrix.job.name }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   debian_platform: "amd64",   crossbuild_package: "" }
          - { name: "arm64v8", debian_platform: "arm64",   crossbuild_package: "crossbuild-essential-arm64" }
          - { name: "armv7",   debian_platform: "armhf",   crossbuild_package: "crossbuild-essential-armhf" }
          - { name: "i386",    debian_platform: "i386",    crossbuild_package: "crossbuild-essential-i386" }

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Create packaging env
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y devscripts build-essential debhelper pkg-config ${{ matrix.job.crossbuild_package }}
          mkdir -p debian-build/${{ matrix.job.name }}/bin

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries-linux-${{ matrix.job.name }}
          path: debian-build/${{ matrix.job.name }}/bin

      - name: Build package for ${{ matrix.job.name }} arch
        run: |
          chmod -v a+x debian-build/${{ matrix.job.name }}/bin/*
          cp -vr debian systemd debian-build/${{ matrix.job.name }}/
          cat debian/control.tpl | sed 's/{{ ARCH }}/${{ matrix.job.debian_platform }}/' > debian-build/${{ matrix.job.name }}/debian/control
          cd debian-build/${{ matrix.job.name }}/
          debuild -i -us -uc -b -a${{ matrix.job.debian_platform }}

      - name: Create Release
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            debian-build/rustdesk-server-hbbr_*_${{ matrix.job.debian_platform }}.deb
            debian-build/rustdesk-server-hbbs_*_${{ matrix.job.debian_platform }}.deb
            debian-build/rustdesk-server-utils_*_${{ matrix.job.debian_platform }}.deb
